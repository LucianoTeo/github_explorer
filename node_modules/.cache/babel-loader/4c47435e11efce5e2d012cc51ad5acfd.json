{"ast":null,"code":"var _jsxFileName = \"/home/luciano/Desktop/rocketseat/bootcamp-goStack/github-explorer/src/pages/dashboard/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Title, Form, Repositories, Error } from './styles';\nimport logo from \"../../assets/logo.svg\";\nimport api from '../../services/api';\n\nconst Dashboard = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [repositories, setRepositories] = useState(() => {\n    const storagedRepositories = localStorage.getItem('@repositories');\n\n    if (storagedRepositories) {\n      return JSON.parse(storagedRepositories);\n    } else {\n      return [];\n    }\n  });\n  const [error, setError] = useState('');\n\n  async function handleRepository(event) {\n    event.preventDefault();\n\n    if (inputValue.length < 1) {\n      setError('Primeiro você precisa informar o autor/repo');\n      return;\n    }\n\n    try {\n      const response = await api.get(`/repos/${inputValue}`);\n      const {\n        full_name,\n        owner,\n        description\n      } = response.data;\n      const newRepository = {\n        full_name,\n        owner,\n        description\n      };\n      setRepositories([...repositories, newRepository]);\n    } catch {\n      setError('Não encontramos nenhum repositorio');\n    }\n  }\n\n  useEffect(() => {\n    localStorage.setItem('@repositories', JSON.stringify(repositories));\n  }, [repositories]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"figure\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, \"Explore repositories on Github\"), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleRepository,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: inputValue,\n    type: \"text\",\n    onChange: e => setInputValue(e.target.value),\n    placeholder: \"Informe o user/repository\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, \"buscar\")), !!error && /*#__PURE__*/React.createElement(Error, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 19\n    }\n  }, error), /*#__PURE__*/React.createElement(Repositories, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, repositories.map(repository => /*#__PURE__*/React.createElement(Link, {\n    to: `/repositories/${repository.full_name}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"figure\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: repository.owner.avatar_url,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"figcaption\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, repository.full_name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, repository.description)), /*#__PURE__*/React.createElement(FiChevronRight, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/luciano/Desktop/rocketseat/bootcamp-goStack/github-explorer/src/pages/dashboard/index.tsx"],"names":["React","useState","useEffect","Link","FiChevronRight","Title","Form","Repositories","Error","api","Dashboard","inputValue","setInputValue","repositories","setRepositories","storagedRepositories","localStorage","getItem","JSON","parse","error","setError","handleRepository","event","preventDefault","length","response","get","full_name","owner","description","data","newRepository","setItem","stringify","logo","e","target","value","map","repository","avatar_url"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, FormEvent } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { FiChevronRight } from 'react-icons/fi';\n\nimport { Title, Form, Repositories, Error } from './styles';\n\nimport logo from '../../assets/logo.svg';\n\nimport api from '../../services/api';\n\ninterface Repository {\n  full_name: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  }\n  description: string;\n}\n\nconst Dashboard: React.FC = () => {\n  const [inputValue, setInputValue ] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n  const storagedRepositories = localStorage.getItem('@repositories');\n    if(storagedRepositories) {\n      return JSON.parse(storagedRepositories);\n    } else {\n      return []\n    }\n  });\n\n  const [error, setError] = useState('');\n\n\n  async function handleRepository(event: FormEvent<HTMLFormElement>): Promise<void> {\n    event.preventDefault();\n\n    if(inputValue.length < 1) {\n      setError('Primeiro você precisa informar o autor/repo');\n      return;\n    }\n\n    try {\n      const response = await api.get(`/repos/${inputValue}`)\n  \n      const { full_name, owner, description } = response.data;\n  \n      const newRepository = {\n        full_name,\n        owner,\n        description,\n      };\n\n      setRepositories([...repositories, newRepository])\n      \n    } catch {\n      setError('Não encontramos nenhum repositorio');\n    }\n  }\n\n\n  useEffect(() => {\n    localStorage.setItem('@repositories', \n    JSON.stringify(repositories));\n\n  }, [repositories])\n  \n  return ( \n    <>\n      <figure>\n        <img src={logo} alt=\"\" />\n      </figure>\n\n      <Title>Explore repositories on Github</Title>\n\n      <Form onSubmit={handleRepository}>\n        <input\n          value={inputValue}\n          type=\"text\"\n          onChange={(e) => setInputValue(e.target.value)}\n          placeholder=\"Informe o user/repository\" \n        />\n        <button type=\"submit\">buscar</button>\n      </Form>\n      \n      {!!error && <Error>{error}</Error>}\n\n      <Repositories>\n        {\n          repositories.map(repository => (\n          <Link to={`/repositories/${repository.full_name}`}>\n            <figure>\n              <img src={repository.owner.avatar_url} alt=\"\" />\n            </figure>\n            <figcaption>\n              <strong>{repository.full_name}</strong>\n              <p>\n                {repository.description}\n              </p>\n            </figcaption>\n            <FiChevronRight size={20} />\n          </Link>\n          ))\n        }\n      </Repositories>\n    </>\n  )\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}